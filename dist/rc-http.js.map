{"version":3,"sources":["rc-http.js","rc-http-controller.js","tpls-http.js"],"names":["angular","module","component","transclude","controller","controllerAs","bindings","templateUrl","auto","service","method","url","config","params","data","response","model","onStart","onSuccess","onError","$scope","$element","$attrs","$transclude","$templateRequest","$injector","$log","rcHttp","this","$service","init","isPending","get_response","success","status","statusText","$onInit","isString","then","html","append","length","template","element","$compile","get","error","has","isUndefined","isObject","copy","cache","extend","send","http_instance","$response","e","$error","message","run","$templateCache","put"],"mappings":"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","file":"rc-http.js","sourcesContent":["(function(angular){\n    'use strict';\n\n\n    // Load module\n    var module = angular.module('rcHttp');\n\n\n    module.component( 'rcHttp',\n        {\n            transclude: true,\n            controller: 'rcHttpCtrl',\n            controllerAs: '$rcHttp',\n            bindings: {\n                templateUrl: \"<?\",\n                auto:       \"@?\",\n                service:    \"@\",\n                method:     \"@\",\n                url:        \"@\",\n                config:     \"<\",\n                params:     \"<?\",\n                data:       \"<\",\n                response:   \"<\",\n                model:      \"=?\",\n                onStart:    \"&\",\n                onSuccess:  \"&\",\n                onError:    \"&\"\n        }\n    });\n\n})(angular);\n","(function(angular){\n  'use strict';\n\n  var module = angular.module('rcHttp');\n\n\n  module.controller('rcHttpCtrl', [\n      '$scope',\n      '$element',\n      '$attrs',\n      '$transclude',\n      '$templateRequest',\n      '$injector',\n      '$log',\n      function ( $scope, $element, $attrs, $transclude, $templateRequest, $injector, $log ) {\n\n      var rcHttp = this;\n      var $service;\n\n      function init() {\n\n          rcHttp.isPending = false;\n      }\n\n\n      function get_response(response, success) {\n\n          return {\n              data: response.data,\n              success: success || true,\n              status: response.status || (success === true ? 200 : 400),\n              statusText: response.statusText || (success === true ? 'OK' : 'Bad Request'),\n          };\n      }\n\n      this.$onInit = function() {\n\n          //Get Template url or transclude if empty\n          $templateRequest(angular.isString(rcHttp.templateUrl) ? rcHttp.templateUrl : \"rc-http.tpl.html\").then(\n              function(html){\n\n                  //If no template url transclude with default empty template.\n                  if (!angular.isString(rcHttp.templateUrl)) {\n                      $element.append($transclude($scope, function () {}));\n                  }\n\n                  if (html.length) {\n                      var template = angular.element(html);\n                      $element.append(template);\n\n                      var $compile = $injector.get('$compile');\n                      $compile(template)($scope);\n                  }\n              },\n              function (error) {\n\n              }\n          );\n\n          //Set default service\n          if (!angular.isString(rcHttp.service) || !rcHttp.service.length || !$injector.has(rcHttp.service)) {\n              rcHttp.service = '$http';\n          }\n\n          //Load Service by inject\n          $service = $injector.get(rcHttp.service);\n\n          //Set default method\n          if (!angular.isString(rcHttp.method) || !rcHttp.method.length || typeof $service[rcHttp.method] !== 'function') {\n              rcHttp.method = 'get';\n          }\n\n          if ( !angular.isString(rcHttp.url) || !rcHttp.url.length) {\n              rcHttp.url = false;\n          }\n\n          rcHttp.auto = angular.isUndefined(rcHttp.auto) || rcHttp.auto === true ? true : false;\n          rcHttp.data = angular.isObject(rcHttp.data) ? rcHttp.data : {};\n          rcHttp.response = rcHttp.response ? angular.copy(get_response(rcHttp.response)) : get_response({}, false);\n          rcHttp.config = angular.isObject(rcHttp.config) ? rcHttp.config : {cache: true};\n\n          if (angular.isObject(rcHttp.params)) {\n              angular.extend(rcHttp.config.params, rcHttp.params);\n          }\n\n          //Call Request\n          if (rcHttp.auto === true) {\n\n              if ( rcHttp.service !== '$http' || (rcHttp.service === '$http' && rcHttp.url) ) {\n                  rcHttp.send();\n              }\n          }\n\n\n      };\n\n\n      this.send = function(config) {\n\n          try {\n\n              rcHttp.isPending = true;\n              rcHttp.onStart();\n\n              if (rcHttp.model) {\n                  rcHttp.config.data = rcHttp.model;\n              }\n\n              config = angular.isObject(config) ? config : angular.copy(rcHttp.config);\n              config.params = !config.params ? angular.copy(rcHttp.config.params) : config.params;\n              config.data = !config.data ? angular.copy(rcHttp.config.data) : config.data;\n\n              var http_instance;\n\n              //Resolve instance method type\n              switch($service[rcHttp.method]) {\n                  case 'get':\n                  case 'delete':\n                  case 'head':\n                  case 'jsonp':\n                      http_instance = $service[rcHttp.method](rcHttp.url, config);\n                      break;\n                  case 'post':\n                  case 'put':\n                  case 'patch':\n                      http_instance = $service[rcHttp.method](rcHttp.url, rcHttp.model, config);\n                      break;\n                  default: {\n                      if (!rcHttp.url) {\n                          http_instance = $service[rcHttp.method](rcHttp.model, config);\n                      }\n                      else {\n                          http_instance = $service[rcHttp.method](rcHttp.url, rcHttp.model, config);\n                      }\n                  }\n              }\n\n\n              http_instance.then(function(success) {\n\n                  rcHttp.response = get_response(success, true);\n\n                  rcHttp.onSuccess({ $response: rcHttp.response });\n                  rcHttp.isPending = false;\n              }, function(error) {\n\n                  rcHttp.response = get_response(error, false);\n\n                  rcHttp.onError({ $response: rcHttp.response });\n                  rcHttp.isPending = false;\n              });\n\n              return http_instance;\n          }\n          catch (e) {\n              $log.error(e);\n\n              rcHttp.onError({ $error: {message: 'Error send request rcHttp'} });\n              rcHttp.isPending = false;\n          }\n      };\n\n\n      init();\n\n  }]);\n\n})(angular);\n","angular.module('rcHttp').run(['$templateCache', function($templateCache) {$templateCache.put('rc-http.tpl.html','');}]);"],"sourceRoot":"dist"}