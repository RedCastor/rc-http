{"version":3,"sources":["rc-http.js","rc-http-controller.js","tpls-http.js"],"names":["angular","module","component","transclude","controller","controllerAs","bindings","service","method","url","config","params","model","onStart","onSuccess","onError","templateUrl","$element","$attrs","$scope","$transclude","$log","$injector","rcHttp","this","init","isPending","$onInit","append","isString","isObject","cache","http","$service","get","extend","data","http_instance","then","success","$success","error","$error","run","$templateCache","put"],"mappings":"CAAA,SAAUA;IACN;IAGA,IAAIC,SAASD,QAAQC,OAAO,UAAU;EAJ1C,CAMGD;;CANH,SAAUA;IACN;IAIA,IAAIC,SAASD,QAAQC,OAAO;IAL/BA,OAASC,UAAQ,UAAA;QAUVC,YAAY;QACZC,YAAY;QACZC,cAAc;QAPdC,UAAS;YASLC,SAAY;YACZC,QAAY;YAPbC,KAAW;YASVC,QAAY;YAPhBC,QAAY;YACZC,OAAY;YACZC,SAAc;YACdC,WAAU;YACNC,SAAY;;QAUhBC,aARI,EAAA,YAAY,UAAA,SAAAC,UAAAC;YACZ,OAAAA,OAAYF,eAAA;;;EAjBxB,CA6BGhB;;CC7BH,SAAUA;IACR;IAEA,IAAIC,SAASD,QAAQC,OAAO;IAG5BA,OAAOG,WAAW,cAAc,EAAC,UAAU,YAAY,UAAU,eAAe,QAAQ,aAAa,SAAWe,QAAQF,UAAUC,QAAQE,aAAaC,MAAMC;QAEzJ,IAAIC,SAASC;QAEb,SAASC;YAELF,OAAOG,YAAY;;QAGvBF,KAAKG,UAAU;YAGX,KAAKT,OAAOF,aAAa;gBACrBC,SAASW,OAAOR,YAAYD,QAAQ;;YAGxCI,OAAOhB,UAAUP,QAAQ6B,SAASN,OAAOhB,WAAWgB,OAAOhB,UAAU;YACrEgB,OAAOf,SAASR,QAAQ6B,SAASN,OAAOf,UAAUe,OAAOf,SAAS;YAClEe,OAAOd,MAAMT,QAAQ6B,SAASN,OAAOd,OAAOc,OAAOd,MAAM;YACzDc,OAAOb,SAASV,QAAQ8B,SAASP,OAAOb,UAAUa,OAAOb,SAAS;gBAACqB,OAAO;;YAE1ER,OAAOS,KAAKT,OAAOhB,SAASgB,OAAOf,QAAQe,OAAOd,KAAKc,OAAOb;;QAIlEc,KAAKQ,OAAO,SAASzB,SAASC,QAAQC,KAAKC;YAEvCa,OAAOG,YAAY;YACnBH,OAAOV;YAEP,IAAIoB,WAAWX,UAAUY,IAAI3B;YAE7B,IAAIgB,OAAOZ,QAAQ;gBACfX,QAAQmC,OAAOzB,OAAOC,QAAQY,OAAOZ;;YAGzC,IAAIY,OAAOX,OAAO;gBACdZ,QAAQmC,OAAOzB,OAAO0B,MAAMb,OAAOX;;YAGvC,IAAIyB,gBAAgBJ,SAASzB,QAAQC,KAAKC;YAE1C2B,cAAcC,KAAK,SAASC;gBAExBhB,OAAOa,OAAOG,QAAQH,OAAOG,QAAQH,OAAOG;gBAE5ChB,OAAOT,UAAU;oBAAE0B,UAAUjB,OAAOa;;gBACpCb,OAAOG,YAAY;eACpB,SAASe;gBAERlB,OAAOR,QAAQ;oBAAE2B,QAAQD;;gBACzBlB,OAAOG,YAAY;;YAGvB,OAAOW;;QAIXZ;;EAhEN,CAoEGzB;;ACpEHA,QAAQC,OAAO,UAAU0C,IAAI,EAAC,kBAAkB,SAASC;IAAiBA,eAAeC,IAAI,oBAAmB","file":"rc-http.js","sourcesContent":["(function(angular){\n    'use strict';\n\n\n    // Load module\n    var module = angular.module('rcHttp');\n\n\n    module.component( 'rcHttp', {\n\n        transclude: true,\n        controller: 'rcHttpCtrl',\n        controllerAs: '$rcHttp',\n        bindings: {\n            service:    \"@\",\n            method:     \"@\",\n            url:        \"@\",\n            config:     \"<\",\n            params:     \"<?\",\n            model:      \"=?\",\n            onStart:    \"&\",\n            onSuccess:  \"&\",\n            onError:    \"&\"\n        },\n        templateUrl: ['$element', '$attrs', function ($element, $attrs) {\n            return $attrs.templateUrl || 'rc-http.tpl.html';\n        }]\n    });\n\n})(angular);\n","(function(angular){\n  'use strict';\n\n  var module = angular.module('rcHttp');\n\n\n  module.controller('rcHttpCtrl', ['$scope', '$element', '$attrs', '$transclude', '$log', '$injector', function ( $scope, $element, $attrs, $transclude, $log, $injector ) {\n\n      var rcHttp = this;\n\n      function init() {\n\n          rcHttp.isPending = false;\n      }\n\n      this.$onInit = function() {\n\n          //If no template url transclude with default empty template.\n          if (!$attrs.templateUrl) {\n              $element.append($transclude($scope, function () {}));\n          }\n\n          rcHttp.service = angular.isString(rcHttp.service) ? rcHttp.service : '$http';\n          rcHttp.method = angular.isString(rcHttp.method) ? rcHttp.method : 'get';\n          rcHttp.url = angular.isString(rcHttp.url) ? rcHttp.url : \"\";\n          rcHttp.config = angular.isObject(rcHttp.config) ? rcHttp.config : {cache: true};\n\n          rcHttp.http(rcHttp.service, rcHttp.method, rcHttp.url, rcHttp.config);\n      };\n\n\n      this.http = function(service, method, url, config) {\n\n          rcHttp.isPending = true;\n          rcHttp.onStart();\n\n          var $service = $injector.get(service);\n\n          if (rcHttp.params) {\n              angular.extend(config.params, rcHttp.params);\n          }\n\n          if (rcHttp.model) {\n              angular.extend(config.data, rcHttp.model);\n          }\n\n          var http_instance = $service[method](url, config);\n\n          http_instance.then(function(success) {\n\n              rcHttp.data = success.data ? success.data : success;\n\n              rcHttp.onSuccess({ $success: rcHttp.data });\n              rcHttp.isPending = false;\n          }, function(error) {\n\n              rcHttp.onError({ $error: error });\n              rcHttp.isPending = false;\n          });\n\n          return http_instance;\n      };\n\n\n      init();\n\n  }]);\n\n})(angular);\n","angular.module('rcHttp').run(['$templateCache', function($templateCache) {$templateCache.put('rc-http.tpl.html','');}]);"],"sourceRoot":"dist"}