{"version":3,"sources":["rc-http.js","rc-http-controller.js","tpls-http.js"],"names":["angular","module","component","transclude","controller","controllerAs","bindings","templateUrl","auto","service","method","url","config","params","data","response","model","onStart","onSuccess","onError","$scope","$element","$attrs","$transclude","$templateRequest","$injector","$log","rcHttp","this","$service","init","isPending","undefined","get_response","resolved","success","status","statusText","$onInit","isString","then","html","append","length","template","element","$compile","get","error","has","isUndefined","isObject","copy","cache","extend","send","form","isFunction","$setTouched","$validate","$valid","$config","http_instance","$response","e","run","$templateCache","put"],"mappings":"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","file":"rc-http.js","sourcesContent":["(function(angular){\n    'use strict';\n\n\n    // Load module\n    var module = angular.module('rcHttp');\n\n\n    module.component( 'rcHttp',\n        {\n            transclude: true,\n            controller: 'rcHttpCtrl',\n            controllerAs: '$rcHttp',\n            bindings: {\n                templateUrl: \"<?\",\n                auto:       \"@?\",\n                service:    \"@\",\n                method:     \"@\",\n                url:        \"@\",\n                config:     \"<\",\n                params:     \"<?\",\n                data:       \"<\",\n                response:   \"<\",\n                model:      \"=?\",\n                onStart:    \"&\",\n                onSuccess:  \"&\",\n                onError:    \"&\"\n        }\n    });\n\n})(angular);\n","(function(angular){\n    'use strict';\n\n    var module = angular.module('rcHttp');\n\n\n    module.controller('rcHttpCtrl', [\n        '$scope',\n        '$element',\n        '$attrs',\n        '$transclude',\n        '$templateRequest',\n        '$injector',\n        '$log',\n        function ( $scope, $element, $attrs, $transclude, $templateRequest, $injector, $log ) {\n\n            var rcHttp = this;\n            var $service;\n\n            function init() {\n\n                rcHttp.isPending = undefined;\n            }\n\n\n            /**\n             * Set response\n             *\n             * @param response\n             * @param resolved\n             * @param init\n             * @returns {{data: *, success: boolean, status: (*|number), statusText: (*|string)}}\n             */\n            function get_response(response, resolved, init) {\n\n                return {\n                    data: !init ? (response.data || null) : undefined,\n                    success: resolved === true ? true : false,\n                    status: response.status || (resolved === true ? 200 : 400),\n                    statusText: response.statusText || (resolved === true ? 'OK' : 'Bad Request')\n                };\n            }\n\n            /**\n             * Component Init\n             */\n            this.$onInit = function() {\n\n                //Get Template url or transclude if empty\n                $templateRequest(angular.isString(rcHttp.templateUrl) ? rcHttp.templateUrl : \"rc-http.tpl.html\").then(\n                    function(html){\n\n                        //If no template url transclude with default empty template.\n                        if (!angular.isString(rcHttp.templateUrl)) {\n                            $element.append($transclude($scope, function () {}));\n                        }\n\n                        if (html.length) {\n                            var template = angular.element(html);\n                            $element.append(template);\n\n                            var $compile = $injector.get('$compile');\n                            $compile(template)($scope);\n                        }\n                    },\n                    function (error) {\n\n                    }\n                );\n\n                //Set default service\n                if (!angular.isString(rcHttp.service) || !rcHttp.service.length || !$injector.has(rcHttp.service)) {\n                    rcHttp.service = '$http';\n                }\n\n                //Load Service by inject\n                $service = $injector.get(rcHttp.service);\n\n                //Set default method\n                if (!angular.isString(rcHttp.method) || !rcHttp.method.length || typeof $service[rcHttp.method] !== 'function') {\n                    rcHttp.method = 'get';\n                }\n\n                if ( !angular.isString(rcHttp.url) || !rcHttp.url.length) {\n                    rcHttp.url = false;\n                }\n\n                rcHttp.auto = angular.isUndefined(rcHttp.auto) || rcHttp.auto === true ? true : false;\n                rcHttp.data = angular.isObject(rcHttp.data) ? rcHttp.data : {};\n                rcHttp.response = rcHttp.response ? angular.copy(get_response(rcHttp.response, true, true)) : get_response({}, false);\n                rcHttp.config = angular.isObject(rcHttp.config) ? rcHttp.config : {cache: true};\n\n                if (angular.isObject(rcHttp.params)) {\n                    angular.extend(rcHttp.config.params, rcHttp.params);\n                }\n\n                //Call Request\n                if (rcHttp.auto === true) {\n\n                    if ( rcHttp.service !== '$http' || (rcHttp.service === '$http' && rcHttp.url) ) {\n                        rcHttp.send();\n                    }\n                }\n\n\n            };\n\n\n            /**\n             * Send Request\n             *\n             * @param config\n             * @returns {*}\n             */\n            this.send = function(config) {\n\n                try {\n\n                    rcHttp.isPending = true;\n\n                    //Form object validation\n                    if (angular.isObject(config) && angular.isObject(config.form)) {\n\n                        if(angular.isFunction(config.form.$setTouched)) {\n                            config.$setTouched();\n                        }\n\n                        if(angular.isFunction(config.form.$validate)) {\n                            config.$validate();\n                        }\n\n                        if (!config.form.$valid) {\n                            return false;\n                        }\n                    }\n\n                    if (rcHttp.model) {\n                        rcHttp.config.data = rcHttp.model;\n                    }\n\n                    config = angular.isObject(config) ? config : angular.copy(rcHttp.config);\n                    config.params = !config.params ? angular.copy(rcHttp.config.params) : config.params;\n                    config.data = !config.data ? angular.copy(rcHttp.config.data) : config.data;\n\n                    rcHttp.onStart({ $config: config });\n\n                    var http_instance;\n\n                    //Resolve instance method type for $http\n                    switch(rcHttp.method) {\n                        case 'get':\n                        case 'delete':\n                        case 'head':\n                        case 'jsonp':\n                            http_instance = $service[rcHttp.method](rcHttp.url, config);\n                            break;\n                        case 'post':\n                        case 'put':\n                        case 'patch':\n                            http_instance = $service[rcHttp.method](rcHttp.url, rcHttp.model, config);\n                            break;\n                        default: {\n                            if (!rcHttp.url) {\n                                http_instance = $service[rcHttp.method](rcHttp.model, config);\n                            }\n                            else {\n                                http_instance = $service[rcHttp.method](rcHttp.url, rcHttp.model, config);\n                            }\n                        }\n                    }\n\n\n                    http_instance.then(function(success) {\n\n                        rcHttp.response = get_response(success, true);\n\n                        rcHttp.onSuccess({ $response: rcHttp.response });\n                        rcHttp.isPending = false;\n                    }, function(error) {\n\n                        rcHttp.response = get_response(error, false);\n\n                        rcHttp.onError({ $response: rcHttp.response });\n                        rcHttp.isPending = false;\n                    });\n\n                    return http_instance;\n                }\n                catch (e) {\n                    $log.error(e);\n\n                    var error = {\n                        status: 0,\n                        statusText: 'Error send request'\n                    };\n\n                    rcHttp.response = get_response(error, false);\n                    rcHttp.onError({ $response: rcHttp.response });\n                    rcHttp.isPending = false;\n                }\n            };\n\n\n            init();\n\n        }]);\n\n})(angular);\n","angular.module('rcHttp').run(['$templateCache', function($templateCache) {$templateCache.put('rc-http.tpl.html','');}]);"],"sourceRoot":"dist"}